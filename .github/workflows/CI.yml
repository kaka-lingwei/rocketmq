name: CI

on:
  pull_request:
  push:
  #schedule:
  #  - cron: "0 18 * * *" # TimeZone: UTC 0

concurrency:
  group: rocketmq-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
  
jobs:
  # code-style:
  #   if: always()
  #   name: Code style
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Check code style
  #       run: mvn -B -q clean checkstyle:check

  # sanity-check:
  #   if: always()
  #   name: Sanity check results
  #   needs: [code-style]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Check results
  #       run: |
  #         [[ ${{ needs.code-style.result }} == 'success' ]] || exit 1;

  dist-tar:
    if: always() 
    name: Build dist tar
    #needs: [sanity-check]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"
          cache: "maven"
      - name: Build distribution tar
        run: |
          mvn -Prelease-all -DskipTests clean install -U
      - uses: actions/upload-artifact@v3
        name: Upload distribution tar
        with:
          name: rocketmq
          path: distribution/target/rocketmq*/rocketmq*

  docker:
    if: always() 
    name: Docker images
    needs: [dist-tar]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        base-image: ["eclipse-temurin:8-jdk-alpine", "eclipse-temurin:11-jdk-alpine", "eclipse-temurin:11-jdk-centos7", "eclipse-temurin:8-jdk-centos7"]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: deepsola/rocketmq-k8s.git
          ref: main
          path: rocketmq-k8s
      - uses: actions/download-artifact@v3
        name: Download distribution tar
        with:
          name: rocketmq
          path: rocketmq
      - name: Build and save docker images
        run: |
          cd rocketmq-k8s/image-build
          version=${{ github.event.pull_request.number || github.ref_name }}-$(uuidgen)
          mkdir versionlist
          touch versionlist/"${version}-`echo ${{ matrix.base-image }} | sed -e "s/:/-/g"`"
          sh ./build-image.sh ${version} ${{ matrix.base-image }} ${{ secrets.DOCKER_REPO_USERNAME }} ${{ secrets.DOCKER_REPO_PASSWORD }}
      - uses: actions/upload-artifact@v3
        name: Upload distribution tar
        with:
          name: versionlist
          path: rocketmq-k8s/image-build/versionlist/*

  # unit-test:
  #   if: always()
  #   name: Unit test
  #   needs: [sanity-check]
  #   runs-on: ${{ matrix.os }}-latest
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       os: [ubuntu, macos, windows]
  #       java-version: [8]
  #       include:
  #         - os: ubuntu
  #           java-version: 11
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Cache maven repository
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-
  #     - uses: actions/setup-java@v3
  #       with:
  #         java-version: ${{ matrix.java-version }}
  #         distribution: adopt
  #     - name: Generate coverage report
  #       run: mvn -B test -T 2C --file pom.xml
  #     - name: Upload to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         fail_ci_if_error: true
  #         verbose: true

  deploy:
    if: always()
    name: Deploy
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: echo VERSIONS=`ls versionlist` >> $GITHUB_OUTPUT
      - uses: deepsola/onetest-action@v0.1.0
        name: Deploy rocketmq
        with:
          ask-config: "${{ secrets.ASK_CONFIG }}"
          test-version: "${{ steps.show_versions.outputs.VERSIONS }}"
          oss-ak: "${{ secrets.OSS_AK }}"
          oss-sk: "${{ secrets.OSS_SK }}"
          docker-repo-username: "${{ secrets.DOCKER_REPO_USERNAME }}"
          docker-repo-password: "${{ secrets.DOCKER_REPO_PASSWORD }}"
          chart-git: "https://ghproxy.com/https://github.com/deepsola/rocketmq-k8s.git"
          chart-branch: "go"
          chart-path: "./"

  integration-test:
    if: always()
    name: Integration test
    needs: [deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Integration test
        run: |
          for version in `ls versionlist`;do echo "${version} test start..."; done
          sleep 3
          for version in `ls versionlist`;do echo "${version} test ok, please check report: http://aaa.com/report"; done
