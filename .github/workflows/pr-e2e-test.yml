name: E2E test for pull request

# read-write repo token
# access to secrets
on:
  workflow_run:
    workflows: ["PR-CI"]
    types:
      - completed

jobs:
  docker:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    timeout-minutes: 30
    strategy:
      matrix:
        base-image: ["ubuntu"]
        java-version: ["8"]
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifactRmq = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "rocketmq"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifactRmq.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/rocketmq.zip', Buffer.from(download.data));
      - run: |
          unzip rocketmq.zip
          mv rocketmq* rocketmq
      - uses: actions/checkout@v3
        with:
          repository: cryptoya/rocketmq-docker.git
          ref: master
          path: rocketmq-docker
      - name: Build and save docker images
        id: build-images
        run: |
          cd rocketmq-docker/image-build-ci
          version=${{ github.event.pull_request.number || github.ref_name }}-$(uuidgen)
          mkdir versionlist
          touch versionlist/"${version}-`echo ${{ matrix.base-image }} | sed -e "s/:/-/g"`"
          sh ./build-image-local.sh ${version} ${{ matrix.base-image }} ${{ matrix.java-version }} ${{ secrets.DOCKER_REPO_USERNAME }} ${{ secrets.DOCKER_REPO_PASSWORD }}
      - uses: actions/upload-artifact@v3
        name: Upload distribution tar
        with:
          name: versionlist
          path: rocketmq-docker/image-build-ci/versionlist/*

      # - name: 'Comment on PR'
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var fs = require('fs');
      #       var issue_number = Number(fs.readFileSync('./NR'));
      #       await github.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: issue_number,
      #         body: 'Everything is OK. Thank you for the PR!'
      #       });
  
  list-version:
    if: always()
    name: List version
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version-json: ${{ steps.show_versions.outputs.version-json }}
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: | 
          a=(`ls versionlist`)
          printf '%s\n' "${a[@]}" | jq -R . | jq -s .
          echo version-json=`printf '%s\n' "${a[@]}" | jq -R . | jq -s .` >> $GITHUB_OUTPUT
  # unit-test:
  #   if: always()
  #   name: Unit test
  #   needs: [sanity-check]
  #   runs-on: ${{ matrix.os }}-latest
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       os: [ubuntu, macos, windows]
  #       java-version: [8]
  #       include:
  #         - os: ubuntu
  #           java-version: 11
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Cache maven repository
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-
  #     - uses: actions/setup-java@v3
  #       with:
  #         java-version: ${{ matrix.java-version }}
  #         distribution: adopt
  #     - name: Generate coverage report
  #       run: mvn -B test -T 2C --file pom.xml
  #     - name: Upload to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         fail_ci_if_error: true
  #         verbose: true

  deploy:
    if: ${{ success() }}
    name: Deploy RocketMQ
    needs: [list-version,docker]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: deepsola/onetest-action@v0.2.8
        name: Deploy rocketmq
        with:
          action: "deploy"
          ask-config: "${{ secrets.ASK_CONFIG }}"
          test-version: "${{ matrix.version }}"
          docker-repo-username: "${{ secrets.DOCKER_REPO_USERNAME }}"
          docker-repo-password: "${{ secrets.DOCKER_REPO_PASSWORD }}"
          chart-git: "https://ghproxy.com/https://github.com/cryptoya/rocketmq-docker.git"
          chart-branch: "master"
          chart-path: "./rocketmq-k8s-helm"
          job-id: ${{ strategy.job-index }}

  e2e-test:
    if: ${{ success() }}
    name: E2E Test
    needs: [list-version, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: deepsola/onetest-action@v0.2.8
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.ASK_CONFIG }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://ghproxy.com/https://github.com/apache/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: java/e2e
          test-cmd: "mvn -B test"
          job-id: ${{ strategy.job-index }}

  clean:
    if: always()
    name: Clean
    needs: [list-version, e2e-test]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: deepsola/onetest-action@v0.2.8
        name: clean
        with:
          action: "clean"
          ask-config: "${{ secrets.ASK_CONFIG }}"
          test-version: "${{ matrix.version }}"
          job-id: ${{ strategy.job-index }}
